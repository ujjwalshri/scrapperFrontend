import PDFDocument from "pdfkit";
import { WritableStreamBuffer } from "stream-buffers";
const generatePDF = async (menu, user, geminiResponseText, itemAnalyses) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    const stream = new WritableStreamBuffer();

    doc.pipe(stream);

    doc
      .fontSize(18)
      .text(`Menu Pricing Analysis Report: ${menu.name}`, { align: "center" });
    doc.moveDown();

    doc
      .fontSize(12)
      .text(`Generated for: ${user.name} (${user.email})`, { align: "center" });
    doc
      .fontSize(10)
      .text(`Location: ${menu.location?.name || "Kirti Nagar, Delhi"}`, {
        align: "center",
      });
    doc.fontSize(10).text(
      `Generated on: ${new Date().toLocaleString("en-IN", {
        timeZone: "Asia/Kolkata",
      })}`,
      { align: "center" }
    );
    doc.moveDown(2);

    doc.fontSize(10).text(geminiResponseText);
    doc.moveDown();

    if (itemAnalyses.length > 0) {
      doc
        .addPage()
        .fontSize(14)
        .text("Price Comparison Summary", { underline: true })
        .moveDown();
      doc.fontSize(9);

      itemAnalyses.forEach((itemData) => {
        try {
          doc
            .text(`Item: "${itemData.itemName}"`, { continued: false })
            .text(
              `  Your Price: ₹${itemData.analysis.comparison.menuPrice.toFixed(
                2
              )}`,
              { continued: false }
            )
            .text(
              `  Avg Competitor Price: ₹${itemData.analysis.comparison.competitorAvgPrice.toFixed(
                2
              )}`,
              { continued: false }
            )
            .text(
              `  Price Difference: ₹${itemData.analysis.comparison.priceDifference.toFixed(
                2
              )} (${itemData.analysis.comparison.percentageDifference}% ${
                itemData.analysis.comparison.isMoreExpensive
                  ? "higher"
                  : "lower"
              } than competitors)`,
              { continued: false }
            )
            .text(
              `  Min Price: ${
                itemData.analysis.min
                  ? `₹${(itemData.analysis.min.price / 100).toFixed(2)} (${
                      itemData.analysis.min.name
                    })`
                  : "N/A"
              }`,
              { continued: false }
            )
            .text(
              `  Max Price: ${
                itemData.analysis.max
                  ? `₹${(itemData.analysis.max.price / 100).toFixed(2)} (${
                      itemData.analysis.max.name
                    })`
                  : "N/A"
              }`,
              { continued: false }
            )
            .moveDown(0.5);
        } catch (error) {
          doc
            .text(`Item: "${itemData.itemName}" - Error processing data`, {
              continued: false,
            })
            .moveDown(0.5);
        }
      });
    }

    doc.moveDown(2);
    doc
      .fontSize(8)
      .text(
        `Report generated by AI Assistant | ${new Date().toLocaleDateString(
          "en-IN",
          { timeZone: "Asia/Kolkata" }
        )}`,
        { align: "center" }
      );

    doc.end();

    stream.on("finish", () => resolve(stream.getContents()));
    stream.on("error", (err) => reject(err));
  });
};

export { generatePDF };
